name: nightly pytorch jni release

on:
  # To trigger this workflow manually, you can use the following curl command:
  # curl -XPOST -u "USERNAME:PERSONAL_TOKEN" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/awslabs/djl/dispatches --data '{"event_type": "nightly-jni-build"}'

  # Make sure you create your personal token with repo access. Follow steps in
  # https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line
  # to create your personal token.
  repository_dispatch:
    types: [nightly-jni-build]
  schedule:
    - cron:  '0 10 * * *'

jobs:
  build-pytorch-jni:
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: [macos-latest, ubuntu-18.04, windows-latest]

    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      # Enable gradle cache: https://github.com/actions/cache/blob/master/examples.md#java---gradle
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - uses: actions/cache@v1
        name: Cache gradle wrapper
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.jar') }}
      - name: Compile JNI
        run: ./gradlew :pytorch:pytorch-native:compileJNI
      - name: Test with Gradle
        run: ./gradlew :integration:test "-Dai.djl.default_engine=PyTorch"
      - name: Upload compiled jni library
        uses: actions/upload-artifact@v1
        if: always()
        with:
          name: jnilib-${{ runner.os }}
          path: pytorch/pytorch-engine/build/jnilib
  publish:
    runs-on: ubuntu-18.04
    needs: [build-pytorch-jni]
    steps:
      - uses: actions/checkout@v2
      - name: Download compiledJNI Linux
        uses: actions/download-artifact@v1
        with:
          name: jnilib-Linux
          path: jnilib
      - name: Download compiledJNI Mac
        uses: actions/download-artifact@v1
        with:
          name: jnilib-macOS
          path: jnilib
      - name: Download compiledJNI Windows
        uses: actions/download-artifact@v1
        with:
          name: jnilib-Windows
          path: jnilib
      - name: Zip artifacts
        run: |
          zip -r jnilib.zip jnilib/*
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 0.4.0-SNAPSHOT-PyTorch-jni
          release_name: Release 0.4.0-SNAPSHOT PyTorch jni library
          draft: false
          prerelease: true
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./jnilib.zip
          asset_name: jnilib.zip
          asset_content_type: application/zip
